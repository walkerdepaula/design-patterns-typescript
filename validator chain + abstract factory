abstract class ValidatorChain {
  abstract validade(): boolean;
}

abstract class ValidatorChainFactory {
  abstract createItemValidator(): ItemValidator;

  abstract createPackageValidator(): PackageValidator;
}

abstract class PackageValidator extends ValidatorChain {
  abstract usefulFunctionB(): string;

  abstract validade(): boolean;
}

abstract class ItemValidator extends ValidatorChain {
  abstract validade(): boolean;
}

class ItemValidatorChain extends ItemValidator {
  useCaseA() {
    return this;
  }

  useCaseB() {
    return this;
  }

  validade() {
    // try {
    //   this
    //     .useCaseA()
    //     .useCaseB();
    // } catch (e) {
    //   return false;
    // }
    return true;
  }
}

class PackageValidatorChain extends PackageValidator {
  private useCaseA() {
    return this;
  }

  private useCaseB() {
    return this;
  }

  public validade() {
    this
      .useCaseA()
      .useCaseB();

    return true;
  }
}

function clientCode(validatorFactory: ValidatorChainFactory) {
  const validatorItem = validatorFactory.createItemValidator();
  const validatorPackage = validatorFactory.createPackageValidator();

  if (validatorItem.validade() && validatorPackage.validade()) {
    console.log('Todas as validações deram bom');
  }
}

class InboundScenery extends ValidatorChainFactory {
  createItemValidator(): ItemValidator {
    return new ItemValidatorChain()
  }
  
  createPackageValidator(): PackageValidator {
    return new PackageValidatorChain();
  }
}

clientCode(new InboundScenery());